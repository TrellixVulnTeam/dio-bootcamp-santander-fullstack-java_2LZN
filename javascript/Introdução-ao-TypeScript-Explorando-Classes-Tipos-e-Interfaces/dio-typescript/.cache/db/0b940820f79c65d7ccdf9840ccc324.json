{"id":"index.ts","dependencies":[{"name":"/home/ti/Caio/santander/javascript/Introdução ao TypeScript: Explorando Classes, Tipos e Interfaces/dio-typescript/tsconfig.json","includedInParent":true,"mtime":1658521635050},{"name":"/home/ti/Caio/santander/javascript/Introdução ao TypeScript: Explorando Classes, Tipos e Interfaces/dio-typescript/package.json","includedInParent":true,"mtime":1658511401654}],"generated":{"js":"\"use strict\";\n/*\nconsole.log('TypeScript')\n\nfunction soma(a: number, b: number){\n    return a + b\n}\n\nsoma(5, 7)\n\n//types\n//interfaces\n\n\ninterface IAnimal {\n    nome: string;\n    tipo: 'terrestre' | 'áquatico';\n    domestico: boolean;\n    // executarRugido(alturaEmDecibeis: number): void;\n}\n\n\ntype IAnimal = {\n    nome: string;\n    tipo: 'terrestre' | 'áquatico';\n    executarRugido(alturaEmDecibeis: number): void;\n}\n\n\ninterface IFelino extends IAnimal{\n    visaoNoturna: boolean;\n}\n\ninterface ICanino extends IAnimal{\n    porte: 'pequeno' | 'medio' | 'grande'\n}\n\ntype IDomestico = IFelino | ICanino\n//type IDomestico = IFelino & ICanino\n\n\nconst animal: IAnimal = {\n    nome: 'Elefante',\n    tipo: 'terrestre',\n    domestico: false\n    // executarRugido: (alturaEmDecibeis) => (`${alturaEmDecibeis}dB`)\n}\n\n//animal.executarRugido(10)\n\nconst felino: IFelino = {\n    nome: 'Leão',\n    tipo: 'terrestre',\n    domestico: false,\n    visaoNoturna: true,\n    // executarRugido: (alturaEmDecibeis) => (`${alturaEmDecibeis}dB`)\n}\n\n//felino.executarRugido(10)\n\nconst animalD: IDomestico = {\n    domestico: true,\n    nome: 'cachorro',\n    porte: 'medio',\n    tipo: 'terrestre'\n}\n*/\n\n/*\nconst input = document.getElementById('input') as HTMLInputElement;\n\n//input.value;\n\ninput.addEventListener('input', (event) => {\n    const i = document.getElementById('input') as HTMLInputElement;\n    console.log(i.value)\n})\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.numero = void 0;\n/*\n//Generic types\n\nfunction adicionaApendiceALista <T>(array: T[], valor: T){\n    return array.map( () => valor)\n}\n\nadicionaApendiceALista([1, 2, 3], 1)\n*/\n\n/*\ninterface IUsuario{\n    id: string;\n    email: string;\n}\n\ninterface IAdmin extends IUsuario{\n    cargo: 'gerente' | 'coordenador' | 'supervisor'\n}\n\nfunction redirecione(usuario: IUsuario | IAdmin){\n    if('cargo' in usuario){\n        //redireciona para a área de administração\n    }\n\n    //redireciona para a área do usuário\n}\n*/\n\n/*\ninterface IUsuario{\n    id: string;\n    email: string;\n    cargo?: 'gerente' | 'coordenador' | 'supervisor' | 'funcionario'\n}\n\n\nfunction redirecione(usuario: IUsuario){\n    if(usuario.cargo){\n        //redirecionar(usuario.cargo)\n    }\n    // redirecionar para a área do usário\n}\n*/\n\n/*\ninterface Cachorro{\n    nome: string;\n    idade: number;\n    parqueFavorito?: string;\n}\n\ntype CachorroSomenteLeitura = {\n    readonly[K in keyof Cachorro]: Cachorro[K];\n}\n\nconst meuCachorro: Cachorro = {\n    nome: 'Apolo',\n    idade: 14\n}\n\nclass MeuCachorro implements Cachorro{\n    idade = 14;\n    nome = 'Apolo';\n\n    constructor(nome, idade){\n        this.nome = nome;\n        this.idade = idade;\n    }\n}\n\n\nclass MeuCachorroLeitura implements CachorroSomenteLeitura{\n    idade;\n    nome;\n\n    constructor(nome, idade){\n        this.nome = nome;\n        this.idade = idade;\n    }\n}\n\nconst cao = new MeuCachorroLeitura('Apolo', 14)\n\ncao.idade = 8;\n\nconsole.log(cao)\n*/\n\n/*\ninterface Estudante {\n    nome: string;\n    idade: number;\n}\n\ninterface Estudante{\n\n}\n\n\nimport $ from 'jquery';\n\n$.fn.extend({\n    novaFuncao(){\n        console.log('Chamou nova função');\n    }\n});\n\n$('input').novaFuncao();\n\n*/\n\nexports.numero = 2;"},"sourceMaps":{"js":{"mappings":[{"source":"index.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"index.ts","name":null,"original":{"line":67,"column":0},"generated":{"line":69,"column":0}},{"source":"index.ts","name":null,"original":{"line":78,"column":0},"generated":{"line":84,"column":0}},{"source":"index.ts","name":null,"original":{"line":87,"column":0},"generated":{"line":94,"column":0}},{"source":"index.ts","name":null,"original":{"line":106,"column":0},"generated":{"line":113,"column":0}},{"source":"index.ts","name":null,"original":{"line":122,"column":0},"generated":{"line":129,"column":0}},{"source":"index.ts","name":null,"original":{"line":166,"column":0},"generated":{"line":173,"column":0}},{"source":"index.ts","name":null,"original":{"line":189,"column":13},"generated":{"line":196,"column":0}},{"source":"index.ts","name":null,"original":{"line":189,"column":13},"generated":{"line":196,"column":7}},{"source":"index.ts","name":null,"original":{"line":189,"column":13},"generated":{"line":196,"column":8}},{"source":"index.ts","name":null,"original":{"line":189,"column":13},"generated":{"line":196,"column":14}},{"source":"index.ts","name":null,"original":{"line":189,"column":22},"generated":{"line":196,"column":17}},{"source":"index.ts","name":null,"original":{"line":189,"column":13},"generated":{"line":196,"column":18}}],"sources":{"index.ts":"/*\nconsole.log('TypeScript')\n\nfunction soma(a: number, b: number){\n    return a + b\n}\n\nsoma(5, 7)\n\n//types\n//interfaces\n\n\ninterface IAnimal {\n    nome: string;\n    tipo: 'terrestre' | 'áquatico';\n    domestico: boolean;\n    // executarRugido(alturaEmDecibeis: number): void;\n}\n\n\ntype IAnimal = {\n    nome: string;\n    tipo: 'terrestre' | 'áquatico';\n    executarRugido(alturaEmDecibeis: number): void;\n}\n\n\ninterface IFelino extends IAnimal{\n    visaoNoturna: boolean;\n}\n\ninterface ICanino extends IAnimal{\n    porte: 'pequeno' | 'medio' | 'grande'\n}\n\ntype IDomestico = IFelino | ICanino\n//type IDomestico = IFelino & ICanino\n\n\nconst animal: IAnimal = {\n    nome: 'Elefante',\n    tipo: 'terrestre',\n    domestico: false\n    // executarRugido: (alturaEmDecibeis) => (`${alturaEmDecibeis}dB`)\n}\n\n//animal.executarRugido(10)\n\nconst felino: IFelino = {\n    nome: 'Leão',\n    tipo: 'terrestre',\n    domestico: false,\n    visaoNoturna: true,\n    // executarRugido: (alturaEmDecibeis) => (`${alturaEmDecibeis}dB`)\n}\n\n//felino.executarRugido(10)\n\nconst animalD: IDomestico = {\n    domestico: true,\n    nome: 'cachorro',\n    porte: 'medio',\n    tipo: 'terrestre'\n}\n*/\n/*\nconst input = document.getElementById('input') as HTMLInputElement;\n\n//input.value;\n\ninput.addEventListener('input', (event) => {\n    const i = document.getElementById('input') as HTMLInputElement;\n    console.log(i.value)\n})\n*/\n\n/*\n//Generic types\n\nfunction adicionaApendiceALista <T>(array: T[], valor: T){\n    return array.map( () => valor)\n}\n\nadicionaApendiceALista([1, 2, 3], 1)\n*/\n/*\ninterface IUsuario{\n    id: string;\n    email: string;\n}\n\ninterface IAdmin extends IUsuario{\n    cargo: 'gerente' | 'coordenador' | 'supervisor'\n}\n\nfunction redirecione(usuario: IUsuario | IAdmin){\n    if('cargo' in usuario){\n        //redireciona para a área de administração\n    }\n\n    //redireciona para a área do usuário\n}\n*/\n\n/*\ninterface IUsuario{\n    id: string;\n    email: string;\n    cargo?: 'gerente' | 'coordenador' | 'supervisor' | 'funcionario'\n}\n\n\nfunction redirecione(usuario: IUsuario){\n    if(usuario.cargo){\n        //redirecionar(usuario.cargo)\n    }\n    // redirecionar para a área do usário\n}\n*/\n\n/*\ninterface Cachorro{\n    nome: string;\n    idade: number;\n    parqueFavorito?: string;\n}\n\ntype CachorroSomenteLeitura = {\n    readonly[K in keyof Cachorro]: Cachorro[K];\n}\n\nconst meuCachorro: Cachorro = {\n    nome: 'Apolo',\n    idade: 14\n}\n\nclass MeuCachorro implements Cachorro{\n    idade = 14;\n    nome = 'Apolo';\n\n    constructor(nome, idade){\n        this.nome = nome;\n        this.idade = idade;\n    }\n}\n\n\nclass MeuCachorroLeitura implements CachorroSomenteLeitura{\n    idade;\n    nome;\n\n    constructor(nome, idade){\n        this.nome = nome;\n        this.idade = idade;\n    }\n}\n\nconst cao = new MeuCachorroLeitura('Apolo', 14)\n\ncao.idade = 8;\n\nconsole.log(cao)\n*/\n\n/*\ninterface Estudante {\n    nome: string;\n    idade: number;\n}\n\ninterface Estudante{\n\n}\n\n\nimport $ from 'jquery';\n\n$.fn.extend({\n    novaFuncao(){\n        console.log('Chamou nova função');\n    }\n});\n\n$('input').novaFuncao();\n\n*/\n\nexport const numero = 2;"},"lineCount":null}},"error":null,"hash":"f162acb31c762481c8b0f51d942597f2","cacheData":{"env":{}}}